import "core-js/modules/es6.object.assign";
var _jsxFileName = "/Users/sacameron/Sites/dd-breakpoint-container/src/components/BrowserContainer.js";
import React from 'react';
import T from 'prop-types';
import BreakpointContainer from './BreakpointContainer';
import { ID_BROWSER } from './Context.js';
import '../css/debug.css'; // ------------------------
// Variables
// ------------------------

var DEBUG_BROWSER = process.env.NODE_ENV === 'development'; // NOTE: If you're going to change any CLASSES or SELECTORS, you'll
// need to also change the  corresponding variables in the SCSS file

var CLASSES = {
  CORE: 'bpc',
  BP_PREFIX: '-',
  DEBUG_MODIFIER: '-debug'
};
var SELECTORS = {
  BP_BROWSER: "".concat(CLASSES.CORE, "__browser"),
  BP_CONTENT: "".concat(CLASSES.CORE, "__content"),
  DEBUG_INDICATOR: "".concat(CLASSES.CORE, "__debugIndicator"),
  DEBUG_IDENTIFIER: "".concat(CLASSES.CORE, "__debugIdentifier")
}; // ------------------------
// Export
// ------------------------
// Emulates media query functionality, and enables 'standalone' <Breakpoint/>
// Also provides backward-compatibility with DDBreakpoints original 'bp()' mixin

var BrowserContainer = function BrowserContainer(props) {
  return React.createElement(BreakpointContainer, Object.assign({
    identifier: ID_BROWSER,
    className: SELECTORS.BP_BROWSER,
    debug: DEBUG_BROWSER
  }, props, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 36
    },
    __self: this
  }));
};

BrowserContainer.propTypes = {
  children: T.oneOfType([T.node, T.func]).isRequired
};
export default BrowserContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL0Jyb3dzZXJDb250YWluZXIuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJUIiwiQnJlYWtwb2ludENvbnRhaW5lciIsIklEX0JST1dTRVIiLCJERUJVR19CUk9XU0VSIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiQ0xBU1NFUyIsIkNPUkUiLCJCUF9QUkVGSVgiLCJERUJVR19NT0RJRklFUiIsIlNFTEVDVE9SUyIsIkJQX0JST1dTRVIiLCJCUF9DT05URU5UIiwiREVCVUdfSU5ESUNBVE9SIiwiREVCVUdfSURFTlRJRklFUiIsIkJyb3dzZXJDb250YWluZXIiLCJwcm9wcyIsInByb3BUeXBlcyIsImNoaWxkcmVuIiwib25lT2ZUeXBlIiwibm9kZSIsImZ1bmMiLCJpc1JlcXVpcmVkIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxDQUFQLE1BQWMsWUFBZDtBQUNBLE9BQU9DLG1CQUFQLE1BQWdDLHVCQUFoQztBQUNBLFNBQVNDLFVBQVQsUUFBMkIsY0FBM0I7QUFFQSxPQUFPLGtCQUFQLEMsQ0FFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUMsYUFBYSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixhQUEvQyxDLENBRUE7QUFDQTs7QUFDQSxJQUFNQyxPQUFPLEdBQUc7QUFDZkMsRUFBQUEsSUFBSSxFQUFFLEtBRFM7QUFFZkMsRUFBQUEsU0FBUyxFQUFFLEdBRkk7QUFHZkMsRUFBQUEsY0FBYyxFQUFFO0FBSEQsQ0FBaEI7QUFNQSxJQUFNQyxTQUFTLEdBQUc7QUFDakJDLEVBQUFBLFVBQVUsWUFBS0wsT0FBTyxDQUFDQyxJQUFiLGNBRE87QUFFakJLLEVBQUFBLFVBQVUsWUFBS04sT0FBTyxDQUFDQyxJQUFiLGNBRk87QUFHakJNLEVBQUFBLGVBQWUsWUFBS1AsT0FBTyxDQUFDQyxJQUFiLHFCQUhFO0FBSWpCTyxFQUFBQSxnQkFBZ0IsWUFBS1IsT0FBTyxDQUFDQyxJQUFiO0FBSkMsQ0FBbEIsQyxDQU9BO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBQ0EsSUFBTVEsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFBQyxLQUFLO0FBQUEsU0FDN0Isb0JBQUMsbUJBQUQ7QUFDQyxJQUFBLFVBQVUsRUFBRWYsVUFEYjtBQUVDLElBQUEsU0FBUyxFQUFFUyxTQUFTLENBQUNDLFVBRnRCO0FBR0MsSUFBQSxLQUFLLEVBQUVUO0FBSFIsS0FJS2MsS0FKTDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUQ2QjtBQUFBLENBQTlCOztBQVNBRCxnQkFBZ0IsQ0FBQ0UsU0FBakIsR0FBNkI7QUFDNUJDLEVBQUFBLFFBQVEsRUFBRW5CLENBQUMsQ0FBQ29CLFNBQUYsQ0FBWSxDQUFDcEIsQ0FBQyxDQUFDcUIsSUFBSCxFQUFTckIsQ0FBQyxDQUFDc0IsSUFBWCxDQUFaLEVBQThCQztBQURaLENBQTdCO0FBSUEsZUFBZVAsZ0JBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFQgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQnJlYWtwb2ludENvbnRhaW5lciBmcm9tICcuL0JyZWFrcG9pbnRDb250YWluZXInO1xuaW1wb3J0IHsgSURfQlJPV1NFUiB9IGZyb20gJy4vQ29udGV4dC5qcyc7XG5cbmltcG9ydCAnLi4vY3NzL2RlYnVnLmNzcyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVmFyaWFibGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgREVCVUdfQlJPV1NFUiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuXG4vLyBOT1RFOiBJZiB5b3UncmUgZ29pbmcgdG8gY2hhbmdlIGFueSBDTEFTU0VTIG9yIFNFTEVDVE9SUywgeW91J2xsXG4vLyBuZWVkIHRvIGFsc28gY2hhbmdlIHRoZSAgY29ycmVzcG9uZGluZyB2YXJpYWJsZXMgaW4gdGhlIFNDU1MgZmlsZVxuY29uc3QgQ0xBU1NFUyA9IHtcblx0Q09SRTogJ2JwYycsXG5cdEJQX1BSRUZJWDogJy0nLFxuXHRERUJVR19NT0RJRklFUjogJy1kZWJ1ZycsXG59O1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG5cdEJQX0JST1dTRVI6IGAke0NMQVNTRVMuQ09SRX1fX2Jyb3dzZXJgLFxuXHRCUF9DT05URU5UOiBgJHtDTEFTU0VTLkNPUkV9X19jb250ZW50YCxcblx0REVCVUdfSU5ESUNBVE9SOiBgJHtDTEFTU0VTLkNPUkV9X19kZWJ1Z0luZGljYXRvcmAsXG5cdERFQlVHX0lERU5USUZJRVI6IGAke0NMQVNTRVMuQ09SRX1fX2RlYnVnSWRlbnRpZmllcmAsXG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEVtdWxhdGVzIG1lZGlhIHF1ZXJ5IGZ1bmN0aW9uYWxpdHksIGFuZCBlbmFibGVzICdzdGFuZGFsb25lJyA8QnJlYWtwb2ludC8+XG4vLyBBbHNvIHByb3ZpZGVzIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkgd2l0aCBEREJyZWFrcG9pbnRzIG9yaWdpbmFsICdicCgpJyBtaXhpblxuY29uc3QgQnJvd3NlckNvbnRhaW5lciA9IHByb3BzID0+IChcblx0PEJyZWFrcG9pbnRDb250YWluZXJcblx0XHRpZGVudGlmaWVyPXtJRF9CUk9XU0VSfVxuXHRcdGNsYXNzTmFtZT17U0VMRUNUT1JTLkJQX0JST1dTRVJ9XG5cdFx0ZGVidWc9e0RFQlVHX0JST1dTRVJ9XG5cdFx0ey4uLnByb3BzfVxuXHQvPlxuKTtcblxuQnJvd3NlckNvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG5cdGNoaWxkcmVuOiBULm9uZU9mVHlwZShbVC5ub2RlLCBULmZ1bmNdKS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlckNvbnRhaW5lcjtcbiJdfQ==