import "core-js/modules/es6.object.define-property";

var _BP_CONTEXTS,
    _jsxFileName = "/Users/sacameron/Sites/dd-breakpoint-container/src/components/Context.js";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import T from 'prop-types';
export var ID_DEFAULT = 'default';
export var ID_BROWSER = 'browser'; // NOTE: Other identifier contexts are created as-needed in WithContext

export var BP_CONTEXTS = (_BP_CONTEXTS = {}, _defineProperty(_BP_CONTEXTS, ID_DEFAULT, React.createContext()), _defineProperty(_BP_CONTEXTS, ID_BROWSER, React.createContext()), _BP_CONTEXTS);

function WithContext(_ref) {
  var identifier = _ref.identifier,
      currentBp = _ref.currentBp,
      children = _ref.children;
  // If a BPC has specified an identifier other than the default
  var hasIdentifier = identifier !== ID_DEFAULT; // Create specific context if it doesn't already exist

  if (hasIdentifier && !BP_CONTEXTS[identifier]) {
    BP_CONTEXTS[identifier] = React.createContext();
  } // CoreContext aka 'default' context must always be present, even if the
  // BPC has a specified identifier - this is to enable the default behaviour
  // of <Breakpoint/> components that don't specify an target BPC identifier


  var CoreContext = BP_CONTEXTS[ID_DEFAULT];
  var IdentifierContext = BP_CONTEXTS[identifier];
  return React.createElement(React.Fragment, null, hasIdentifier ? React.createElement(IdentifierContext.Provider, {
    value: currentBp,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 31
    },
    __self: this
  }, React.createElement(CoreContext.Provider, {
    value: currentBp,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 32
    },
    __self: this
  }, children)) : React.createElement(IdentifierContext.Provider, {
    value: currentBp,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 37
    },
    __self: this
  }, children));
}

WithContext.propTypes = {
  identifier: T.string.isRequired,
  currentBp: T.string,
  children: T.node.isRequired
};
WithContext.defaultProps = {
  currentBp: null
};
export { WithContext };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL0NvbnRleHQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJUIiwiSURfREVGQVVMVCIsIklEX0JST1dTRVIiLCJCUF9DT05URVhUUyIsImNyZWF0ZUNvbnRleHQiLCJXaXRoQ29udGV4dCIsImlkZW50aWZpZXIiLCJjdXJyZW50QnAiLCJjaGlsZHJlbiIsImhhc0lkZW50aWZpZXIiLCJDb3JlQ29udGV4dCIsIklkZW50aWZpZXJDb250ZXh0IiwicHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm5vZGUiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsQ0FBUCxNQUFjLFlBQWQ7QUFFQSxPQUFPLElBQU1DLFVBQVUsR0FBRyxTQUFuQjtBQUNQLE9BQU8sSUFBTUMsVUFBVSxHQUFHLFNBQW5CLEMsQ0FFUDs7QUFDQSxPQUFPLElBQU1DLFdBQVcscURBQ3RCRixVQURzQixFQUNURixLQUFLLENBQUNLLGFBQU4sRUFEUyxpQ0FFdEJGLFVBRnNCLEVBRVRILEtBQUssQ0FBQ0ssYUFBTixFQUZTLGdCQUFqQjs7QUFLUCxTQUFTQyxXQUFULE9BQTBEO0FBQUEsTUFBbkNDLFVBQW1DLFFBQW5DQSxVQUFtQztBQUFBLE1BQXZCQyxTQUF1QixRQUF2QkEsU0FBdUI7QUFBQSxNQUFaQyxRQUFZLFFBQVpBLFFBQVk7QUFDekQ7QUFDQSxNQUFNQyxhQUFhLEdBQUdILFVBQVUsS0FBS0wsVUFBckMsQ0FGeUQsQ0FJekQ7O0FBQ0EsTUFBSVEsYUFBYSxJQUFJLENBQUNOLFdBQVcsQ0FBQ0csVUFBRCxDQUFqQyxFQUErQztBQUM5Q0gsSUFBQUEsV0FBVyxDQUFDRyxVQUFELENBQVgsR0FBMEJQLEtBQUssQ0FBQ0ssYUFBTixFQUExQjtBQUNBLEdBUHdELENBU3pEO0FBQ0E7QUFDQTs7O0FBQ0EsTUFBTU0sV0FBVyxHQUFHUCxXQUFXLENBQUNGLFVBQUQsQ0FBL0I7QUFDQSxNQUFNVSxpQkFBaUIsR0FBR1IsV0FBVyxDQUFDRyxVQUFELENBQXJDO0FBRUEsU0FDQywwQ0FDRUcsYUFBYSxHQUNiLG9CQUFDLGlCQUFELENBQW1CLFFBQW5CO0FBQTRCLElBQUEsS0FBSyxFQUFFRixTQUFuQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNDLG9CQUFDLFdBQUQsQ0FBYSxRQUFiO0FBQXNCLElBQUEsS0FBSyxFQUFFQSxTQUE3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNFQyxRQURGLENBREQsQ0FEYSxHQU9iLG9CQUFDLGlCQUFELENBQW1CLFFBQW5CO0FBQTRCLElBQUEsS0FBSyxFQUFFRCxTQUFuQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNFQyxRQURGLENBUkYsQ0FERDtBQWVBOztBQUVESCxXQUFXLENBQUNPLFNBQVosR0FBd0I7QUFDdkJOLEVBQUFBLFVBQVUsRUFBRU4sQ0FBQyxDQUFDYSxNQUFGLENBQVNDLFVBREU7QUFFdkJQLEVBQUFBLFNBQVMsRUFBRVAsQ0FBQyxDQUFDYSxNQUZVO0FBR3ZCTCxFQUFBQSxRQUFRLEVBQUVSLENBQUMsQ0FBQ2UsSUFBRixDQUFPRDtBQUhNLENBQXhCO0FBTUFULFdBQVcsQ0FBQ1csWUFBWixHQUEyQjtBQUMxQlQsRUFBQUEsU0FBUyxFQUFFO0FBRGUsQ0FBM0I7QUFJQSxTQUFTRixXQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgSURfREVGQVVMVCA9ICdkZWZhdWx0JztcbmV4cG9ydCBjb25zdCBJRF9CUk9XU0VSID0gJ2Jyb3dzZXInO1xuXG4vLyBOT1RFOiBPdGhlciBpZGVudGlmaWVyIGNvbnRleHRzIGFyZSBjcmVhdGVkIGFzLW5lZWRlZCBpbiBXaXRoQ29udGV4dFxuZXhwb3J0IGNvbnN0IEJQX0NPTlRFWFRTID0ge1xuXHRbSURfREVGQVVMVF06IFJlYWN0LmNyZWF0ZUNvbnRleHQoKSxcblx0W0lEX0JST1dTRVJdOiBSZWFjdC5jcmVhdGVDb250ZXh0KCksXG59O1xuXG5mdW5jdGlvbiBXaXRoQ29udGV4dCh7IGlkZW50aWZpZXIsIGN1cnJlbnRCcCwgY2hpbGRyZW4gfSkge1xuXHQvLyBJZiBhIEJQQyBoYXMgc3BlY2lmaWVkIGFuIGlkZW50aWZpZXIgb3RoZXIgdGhhbiB0aGUgZGVmYXVsdFxuXHRjb25zdCBoYXNJZGVudGlmaWVyID0gaWRlbnRpZmllciAhPT0gSURfREVGQVVMVDtcblxuXHQvLyBDcmVhdGUgc3BlY2lmaWMgY29udGV4dCBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3Rcblx0aWYgKGhhc0lkZW50aWZpZXIgJiYgIUJQX0NPTlRFWFRTW2lkZW50aWZpZXJdKSB7XG5cdFx0QlBfQ09OVEVYVFNbaWRlbnRpZmllcl0gPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5cdH1cblxuXHQvLyBDb3JlQ29udGV4dCBha2EgJ2RlZmF1bHQnIGNvbnRleHQgbXVzdCBhbHdheXMgYmUgcHJlc2VudCwgZXZlbiBpZiB0aGVcblx0Ly8gQlBDIGhhcyBhIHNwZWNpZmllZCBpZGVudGlmaWVyIC0gdGhpcyBpcyB0byBlbmFibGUgdGhlIGRlZmF1bHQgYmVoYXZpb3VyXG5cdC8vIG9mIDxCcmVha3BvaW50Lz4gY29tcG9uZW50cyB0aGF0IGRvbid0IHNwZWNpZnkgYW4gdGFyZ2V0IEJQQyBpZGVudGlmaWVyXG5cdGNvbnN0IENvcmVDb250ZXh0ID0gQlBfQ09OVEVYVFNbSURfREVGQVVMVF07XG5cdGNvbnN0IElkZW50aWZpZXJDb250ZXh0ID0gQlBfQ09OVEVYVFNbaWRlbnRpZmllcl07XG5cblx0cmV0dXJuIChcblx0XHQ8PlxuXHRcdFx0e2hhc0lkZW50aWZpZXIgPyAoXG5cdFx0XHRcdDxJZGVudGlmaWVyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y3VycmVudEJwfT5cblx0XHRcdFx0XHQ8Q29yZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2N1cnJlbnRCcH0+XG5cdFx0XHRcdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHRcdFx0PC9Db3JlQ29udGV4dC5Qcm92aWRlcj5cblx0XHRcdFx0PC9JZGVudGlmaWVyQ29udGV4dC5Qcm92aWRlcj5cblx0XHRcdCkgOiAoXG5cdFx0XHRcdDxJZGVudGlmaWVyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y3VycmVudEJwfT5cblx0XHRcdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHRcdDwvSWRlbnRpZmllckNvbnRleHQuUHJvdmlkZXI+XG5cdFx0XHQpfVxuXHRcdDwvPlxuXHQpO1xufVxuXG5XaXRoQ29udGV4dC5wcm9wVHlwZXMgPSB7XG5cdGlkZW50aWZpZXI6IFQuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdGN1cnJlbnRCcDogVC5zdHJpbmcsXG5cdGNoaWxkcmVuOiBULm5vZGUuaXNSZXF1aXJlZCxcbn07XG5cbldpdGhDb250ZXh0LmRlZmF1bHRQcm9wcyA9IHtcblx0Y3VycmVudEJwOiBudWxsLFxufTtcblxuZXhwb3J0IHsgV2l0aENvbnRleHQgfTtcbiJdfQ==