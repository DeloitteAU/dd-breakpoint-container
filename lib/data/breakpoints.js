import "core-js/modules/es6.array.index-of";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";
import "core-js/modules/es6.number.constructor";
import "core-js/modules/es6.number.is-nan";
// NOTE: These key:value pairs mirror those in this module's SCSS
// If you're going to add or change bps, check the notes near the top of the SCSS file
export var BREAKPOINTS = {
  none: 0,
  xxxs: 320,
  xxs: 359,
  xs: 480,
  s: 640,
  m: 768,
  l: 1024,
  xl: 1244,
  xxl: 1410,
  xxxl: 1690
};
/*
 * Returns the breakpoint 'upper-limit' width in pixels,
 * which is essentially the width of the next breakpoint
 *
 * @param {String} bp
 * @returns {Number}
 */

export function getBpUpperLimit(bp) {
  if (!Number.isNaN(parseInt(bp))) {
    return null;
  }

  var bpKeys = Object.keys(BREAKPOINTS);
  var nextHighestBpIndex = bpKeys.indexOf(bp) + 1; // Check edge-case for when target breakpoint is the last in the array, in which
  // case Infinity is an acceptable upper-bound, since there is no threshold

  var nextHighestBpWidth = nextHighestBpIndex !== BREAKPOINTS.length - 1 ? BREAKPOINTS[bpKeys[nextHighestBpIndex]] : Infinity;
  return nextHighestBpWidth;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhL2JyZWFrcG9pbnRzLmpzIl0sIm5hbWVzIjpbIkJSRUFLUE9JTlRTIiwibm9uZSIsInh4eHMiLCJ4eHMiLCJ4cyIsInMiLCJtIiwibCIsInhsIiwieHhsIiwieHh4bCIsImdldEJwVXBwZXJMaW1pdCIsImJwIiwiTnVtYmVyIiwiaXNOYU4iLCJwYXJzZUludCIsImJwS2V5cyIsIk9iamVjdCIsImtleXMiLCJuZXh0SGlnaGVzdEJwSW5kZXgiLCJpbmRleE9mIiwibmV4dEhpZ2hlc3RCcFdpZHRoIiwibGVuZ3RoIiwiSW5maW5pdHkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQSxPQUFPLElBQU1BLFdBQVcsR0FBRztBQUMxQkMsRUFBQUEsSUFBSSxFQUFFLENBRG9CO0FBRTFCQyxFQUFBQSxJQUFJLEVBQUUsR0FGb0I7QUFHMUJDLEVBQUFBLEdBQUcsRUFBRSxHQUhxQjtBQUkxQkMsRUFBQUEsRUFBRSxFQUFFLEdBSnNCO0FBSzFCQyxFQUFBQSxDQUFDLEVBQUUsR0FMdUI7QUFNMUJDLEVBQUFBLENBQUMsRUFBRSxHQU51QjtBQU8xQkMsRUFBQUEsQ0FBQyxFQUFFLElBUHVCO0FBUTFCQyxFQUFBQSxFQUFFLEVBQUUsSUFSc0I7QUFTMUJDLEVBQUFBLEdBQUcsRUFBRSxJQVRxQjtBQVUxQkMsRUFBQUEsSUFBSSxFQUFFO0FBVm9CLENBQXBCO0FBYVA7Ozs7Ozs7O0FBT0EsT0FBTyxTQUFTQyxlQUFULENBQXlCQyxFQUF6QixFQUE2QjtBQUNuQyxNQUFJLENBQUNDLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhQyxRQUFRLENBQUNILEVBQUQsQ0FBckIsQ0FBTCxFQUFpQztBQUFFLFdBQU8sSUFBUDtBQUFjOztBQUVqRCxNQUFNSSxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZbEIsV0FBWixDQUFmO0FBQ0EsTUFBTW1CLGtCQUFrQixHQUFHSCxNQUFNLENBQUNJLE9BQVAsQ0FBZVIsRUFBZixJQUFxQixDQUFoRCxDQUptQyxDQU1uQztBQUNBOztBQUNBLE1BQU1TLGtCQUFrQixHQUN2QkYsa0JBQWtCLEtBQU1uQixXQUFXLENBQUNzQixNQUFaLEdBQXFCLENBQTdDLEdBQ0d0QixXQUFXLENBQUNnQixNQUFNLENBQUNHLGtCQUFELENBQVAsQ0FEZCxHQUVHSSxRQUhKO0FBS0EsU0FBT0Ysa0JBQVA7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIE5PVEU6IFRoZXNlIGtleTp2YWx1ZSBwYWlycyBtaXJyb3IgdGhvc2UgaW4gdGhpcyBtb2R1bGUncyBTQ1NTXG4vLyBJZiB5b3UncmUgZ29pbmcgdG8gYWRkIG9yIGNoYW5nZSBicHMsIGNoZWNrIHRoZSBub3RlcyBuZWFyIHRoZSB0b3Agb2YgdGhlIFNDU1MgZmlsZVxuZXhwb3J0IGNvbnN0IEJSRUFLUE9JTlRTID0ge1xuXHRub25lOiAwLFxuXHR4eHhzOiAzMjAsXG5cdHh4czogMzU5LFxuXHR4czogNDgwLFxuXHRzOiA2NDAsXG5cdG06IDc2OCxcblx0bDogMTAyNCxcblx0eGw6IDEyNDQsXG5cdHh4bDogMTQxMCxcblx0eHh4bDogMTY5MCxcbn07XG5cbi8qXG4gKiBSZXR1cm5zIHRoZSBicmVha3BvaW50ICd1cHBlci1saW1pdCcgd2lkdGggaW4gcGl4ZWxzLFxuICogd2hpY2ggaXMgZXNzZW50aWFsbHkgdGhlIHdpZHRoIG9mIHRoZSBuZXh0IGJyZWFrcG9pbnRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYnBcbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCcFVwcGVyTGltaXQoYnApIHtcblx0aWYgKCFOdW1iZXIuaXNOYU4ocGFyc2VJbnQoYnApKSkgeyByZXR1cm4gbnVsbDsgfVxuXG5cdGNvbnN0IGJwS2V5cyA9IE9iamVjdC5rZXlzKEJSRUFLUE9JTlRTKTtcblx0Y29uc3QgbmV4dEhpZ2hlc3RCcEluZGV4ID0gYnBLZXlzLmluZGV4T2YoYnApICsgMTtcblxuXHQvLyBDaGVjayBlZGdlLWNhc2UgZm9yIHdoZW4gdGFyZ2V0IGJyZWFrcG9pbnQgaXMgdGhlIGxhc3QgaW4gdGhlIGFycmF5LCBpbiB3aGljaFxuXHQvLyBjYXNlIEluZmluaXR5IGlzIGFuIGFjY2VwdGFibGUgdXBwZXItYm91bmQsIHNpbmNlIHRoZXJlIGlzIG5vIHRocmVzaG9sZFxuXHRjb25zdCBuZXh0SGlnaGVzdEJwV2lkdGggPVxuXHRcdG5leHRIaWdoZXN0QnBJbmRleCAhPT0gKEJSRUFLUE9JTlRTLmxlbmd0aCAtIDEpXG5cdFx0XHQ/IEJSRUFLUE9JTlRTW2JwS2V5c1tuZXh0SGlnaGVzdEJwSW5kZXhdXVxuXHRcdFx0OiBJbmZpbml0eTtcblxuXHRyZXR1cm4gbmV4dEhpZ2hlc3RCcFdpZHRoO1xufVxuIl19